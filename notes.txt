###Inicio del proyecto - ClimaApp

1. Empezamos creando nuestra aplicacion de node desde el terminal con el siguiente comando:

``
yarn init
``

2. Luego instalamos los siguientes paquetes:

Colors & Inquirer

``
$ yarn add colors inquirer
``

3. En el `package.json` agregamos un script, start:

```
"scripts": {
    "start": "node index.js"
  },
```

Esto con la finalidad de poder ejecutar nuestro proyecto en el terminal
con un simple `$ yarn start`

4. Importamos un archivo llamado `inquirer.js` que se encontraba 
en el curso, el cual va a tener ciertas funciones ya creadas
previamente. (todo esto dentro de una carpeta llamada helpers)

5. Por ultimo, en index.js, agregamos el siguiente codigo para probar que
todo funciona correctamente:

```
    const { leerInput } = require('./helpers/inquirer.js')

    const main = async (params) => {
        const text = await leerInput('Hola ')

        console.log(text);
    };

    main()
```

##Menu de la Aplicacion

1. El menu ya esta creado gracias a la funciones anteriores en el archivo
de inquirer, lo unico que hay que hacer el realizar lo siguiente:

```
const { leerInput, inquirerMenu, pausa } = require('./helpers/inquirer.js');

const main = async () => {
	let opt;

	do {
		opt = await inquirerMenu();

		console.log({ opt });

		await pausa();
	} while (opt !== 0);
};

main();

```

2. En el archivo de inquirer, modificamos algunas cosas:

```
const preguntas = [
	{
		type: 'list',
		name: 'opcion',
		message: '¿Qué desea hacer?',
		choices: [
			{
				value: 1,
				name: `${'1.'.green} Buscar ciudad`,
			},
			{
				value: 2,
				name: `${'2.'.green} Historial`,
			},
			{
				value: 0,
				name: `${'0.'.green} Salir`,
			},
		],
	},
];
```

###Modelo para controlar la aplicación

1. Empezamos creando un modelo, llamado busquedas (esto dentro de una carpeta llamda models)

``
class Busquedas {
    historial = ['Tegucigalpa', 'Madrid', 'Caracas']

    constructor() {
        // TODO: leer bd si existe
    }

    async ciudad( lugar = '') {
        //peticion http

        console.log(lugar);

        return [] // retornar los lugares que coincidan
    }
}

module.exports = Busquedas

``

2. Luego en index.js, cuando obtengamos la respuesta del usuario (mediante el menu que ya creamos),
realizamos un switch:

``
switch (opt) {
	case 1:
		// Mostrar mensaje
		const lugar = await leerInput('Ciudad: ');
		console.log(lugar);

		// Buscar los lugares

		// Seleccionar el lugar

		// Clima

		// Mostrar resultados
		console.log('Informacion del lugar\n'.green);
		console.log('Ciudad: ');
		console.log('Lat: ');
		console.log('Lng: ');
		console.log('Temperatura: ');
		console.log('Minima: ');
		console.log('Maxima: ');
	break;
}
``

##Realizar peticiones HTTP desde Node

Instalamos axios y vimos un ejemplo de como se utiliza, no mas.

## Mapbox Search API y Token de acceso

Hicimos el inicio de sesion en las paginas de mapbox para lograr crear un token y luego a;adirlo 
al api que nos da la pagina. Lo probamos en axios y listo.

## Crear instancias de Axios

1. En este video lo que hicimos fue crear una const llamada instance para crear la configuracion de axios

``
get paramsMapbox() {
	return {
		'access_token': 'pk.eyJ1IjoidmhhbHZhcmV6IiwiYSI6ImNrbW1iYTRhcDFkZjYyd3J3MTFndXVyYTUifQ.zc-k0IVILns7X7hiddl-OQ',
		'limit': 5,
		'languaje': 'es'
	}
}

async ciudad(lugar = '') {
	try {
		//peticion http
		const intance = axios.create({
			baseURL: `https://api.mapbox.com/geocoding/v5/mapbox.places/${lugar}.json`,
			params: this.paramsMapbox
		})

		const resp = await intance.get()

		console.log(resp.data);
		return []; // retornar los lugares que coincidan
	} catch (error) {
		return [];
	}
}

``

##Variables de entorno

1. Instalamos dotenv

$ yarn add dotenv 

2. Luego, lo llamamos al princimos de index.js

``
require('dotenv').config()
``

3. Modificamos el nombre de tokens.txt a .env con nuestro MAPBOX_KEY

4. Luego, llamamos en busquedas.js la variable de etorno recien creada

``
'access_token': process.env.MAPBOX_KEY,
``

##Listar los países de forma interactiva

1. En nuestra busqueda.js retornamos:

``
return resp.data.features.map((f) => ({
	id: f.id,
	nombre: f.place_name,
	lng: f.center[0],
	lat: f.center[1]
}));
``

Luego en index.js:

```
case 1:
	// Mostrar mensaje
	const termino = await leerInput('Ciudad: ');
	// Buscar los lugares
	const lugares = await busquedas.ciudad(termino);
	//  Seleccionar lugar
	const id = await listarLugares(lugares);
	const lugarSel = lugares.find((l) => l.id === id);

	// Clima

	// Mostrar resultados
	console.log('Informacion del lugar\n'.green);
	console.log('Ciudad: ', lugarSel.nombre);
	console.log('Lat: ', lugarSel.lat);
	console.log('Lng: ', lugarSel.lng);
	console.log('Temperatura: ');
	console.log('Minima: ');
	console.log('Maxima: ');
	break;
```